{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","tagline":"Filter files based on country code and ASN of IPs and domain names.","body":"Netgrep is a command line tool which tells you which lines in a text file\r\ncontain network resources related to a particular country or Autonomous\r\nNetwork (AS).\r\n\r\nSend in a long file, and it will:\r\n\r\n* automatically detect domain names and IP addresses\r\n* resolve domains to IP addresses\r\n* geo-locate IP addresses to country codes and ASNs\r\n* extract country codes from domain names\r\n* output each line matching at least one country code or ASN specified.\r\n\r\n## Use case\r\n\r\nYou have a big list of infected botnet clients, URLs, or IP addresses, and you\r\nwant to find out which ones are related to your country code or AS.\r\n\r\nFiles don't need to be in any particular format. Netgrep will make a best effort to find and locate anything which looks like a network resource, then find out where the domain and hosting lives.\r\n\r\n## Example usage\r\n\r\n### Example usage\r\n\r\n    # a simple log file\r\n  \r\n    $ cat mylog.txt\r\n    abc.net.au,Australian Broadcasting Corporation (ABC)\r\n    bbc.co.uk,British Broadcasting Corporation (BBC)\r\n    203.2.218.214,ABC IP address\r\n    xs4all.com,Hosted in Netherlands with .com extension\r\n  \r\n    # match anything hosted in .nl\r\n    \r\n    $ netgrep NL mylog.txt\r\n    xs4all.com,Hosted in Netherlands with .com extension\r\n    \r\n    # match Australian IPs and domain names\r\n    \r\n    $ netgrep AU mylog.txt\r\n    abc.net.au,Australian Broadcasting Corporation (ABC)\r\n    203.2.218.214,ABC IP address\r\n    \r\n    # match IPs resolving to Autonomous System 2818, owned by BBC\r\n    \r\n    $ netgrep AS2818 mylog.txt \r\n    bbc.co.uk,British Broadcasting Corporation\r\n    \r\n    # combination filter with both Australian IPs / domains and AS2818\r\n    \r\n    $ netgrep AU,AS2818 mylog.txt\r\n    abc.net.au,Australian Broadcasting Corporation (ABC)\r\n    bbc.co.uk,British Broadcasting Corporation (BBC)\r\n    203.2.218.214,ABC IP address\r\n\r\n### Advanced usage\r\n\r\n#### Multiple files\r\n\r\nYou can use wildcards or pass in multiple files:\r\n\r\n    $ netgrep AS444 logs/firstlog.txt logs/secondlog.txt\r\n    ...\r\n    $ netgrep AS444 logs/*.txt\r\n    ...\r\n\r\n(Note that netgrep can't handle recursive subdirectories as yet.)\r\n\r\n#### Piping standard input\r\n\r\nNetgrep supports piping from standard input like this:\r\n\r\n    $ cat input1.txt | netgrep BR\r\n\r\nYou can use netgrep as a quick little assertion tool. For example, does\r\nakamai.com resolve to any boxes in Singapore?\r\n\r\n    $ echo \"akamai.com\" | netgrep SG\r\n    akamai.com  \r\n    $\r\n    # got output - assertion proven\r\n    \r\n    $ echo \"akamai.com\" | netgrep FI\r\n    $ \r\n    # no output - assertion failed\r\n\r\n## Installation\r\n\r\n### Quick install:\r\n\r\n#### Method 1\r\n\r\n1. Make sure you have adns installed. \r\n1. ```$ sudo easy_install netgrep```\r\n\r\n#### Method 2\r\n\r\n1. Make sure you have adns installed\r\n2. Extract the tarball from https://github.com/csirtfoundry/netgrep/tarball/master\r\n3. ```cd [directory it was unpacked to]```\r\n4. ```$ sudo python setup.py install```\r\n\r\n### Detailed install:\r\n\r\nIf the above didn't work out of the box, here's what you can do.\r\n\r\nYou'll need:\r\n\r\n* adns (http://www.chiark.greenend.org.uk/~ian/adns/)\r\n* Python libraries:\r\n  * BulkWhois\r\n  * publicsuffix\r\n  * adns-python\r\n\r\nHere's some OS-specific ways to install the prerequisites and netgrep, assuming a clean system:\r\n\r\n#### 1: Linux install with apt-get:\r\n\r\n    $ sudo apt-get install python-setuptools gcc python-dev python-adns\r\n    $ sudo easy_install netgrep\r\n\r\n#### 2: OS X install:\r\n\r\nUsing homebrew (or your choice of package manager):\r\n\r\nInstall Xcode (needed for building lots of Homebrew packages)\r\n\r\n    $ brew install adns\r\n    $ sudo easy_install pip\r\n    $ sudo pip install netgrep\r\n\r\n#### 3: Download and extract the tarball and then (with apt-get):\r\n\r\n    $ sudo apt-get install gcc python-dev python-setuptools python-adns\r\n    $ sudo python setup.py install\r\n\r\n#### Windows\r\n\r\nUntested, and suspect it may not work. If you like to report how it did or didn't work, please let me know.\r\n\r\n### Installation issues:\r\n\r\nWhen installing adns-python, you may receive:\r\n\r\n    adnsmodule.c:8:20: fatal error: Python.h: No such file or directory\r\n\r\nIn that case:\r\n\r\n    sudo apt-get install python-dev\r\n\r\n## How it works\r\n\r\n1. Netgrep makes one pass of the logs, extracting any candidate domain name and IP addresses it finds.\r\n2. Domain names are checked to see if they resolve to a TLD present in the Mozilla Public Suffix List. Anything not matching is ignored.\r\n3. IP addresses are checked to ensure they're valid IPv4. IPv6 is currently not supported, but there are plans to do add this later.\r\n4. Domains are resolved to IP addresses asynchronously. This should be quite fast for hundreds of IP addresses, but may take a little time if you have thousands.\r\n5. All IPs gathered both directly from the log and via DNS resolution are submitted via bulk query to Team Cymru's bulk whois service, retrieving country code and ASN.\r\n6. The file is scanned, the country code and ASN filters applied, and matching lines are output.\r\n\r\n## Other notes\r\n\r\n* This initial release is focusing on functionality rather than performance for matching. Because of the network lookups it uses, it's not going to be anywhere near as fast as mighty grep: \r\nhttp://lists.freebsd.org/pipermail/freebsd-current/2010-August/019310.html?\r\n* Pains have been taken to keep the memory footprint low and network calls asynchronous / bulk where possible.\r\n* netgrep only handles one record per line for now, so that means no multiline XML parsing. If this might be useful, let me know [chris.horsley at csirtfoundry dot com].\r\n\r\n\r\n## Acknowledgements\r\n\r\nRob Lowe for the concept\r\n\r\nPeteris Krumins (http://www.catonmat.net/blog/asynchronous-dns-resolution/) for his no-fuss interface to adns. Made one very slight tweak to return multiple A records rather than just the first.","name":"Netgrep"}