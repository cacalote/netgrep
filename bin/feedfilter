#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
from abusefeedfilter.feedfilter import FeedFilter
import sys

def get_args():
    parser = argparse.ArgumentParser(description="Filter records based on IPs\
                                                  or ASNs from a file")
    parser.add_argument('--filter', required=True,
                        help="Define the country codes and ASes you want to  \
                              filter on.\
                              Use comma separators with no spaces.\
                              e.g. AS345,AS234,JP")
    parser.add_argument('--format', choices=['CSV','TSV','delim','XML'], 
                        required=True,
                        help="Format of input file: delimited with one record \
                              per line, or XML with records across multiple \
                              lines")
    parser.add_argument('--delim', 
                        help="If you have a delimited file, specify the \
                              delimeter e.g. | ")
    parser.add_argument('--xml_record_delim', 
                        help="For XML files, which field starts and ends a \
                              record?")
    parser.add_argument('--ignore_field_num',  
                        help="Specify the delimited field number (starting \
                              from 0) which contains IP addresses you don't \
                              want to filter in, e.g. your sensor IP.")
    parser.add_argument('--xml_ignore_field', 
                        help="Specify an XML field which you don't want to \
                              filter in e.g. your sensor IP")
    parser.add_argument('--has_header', action="store_true",
                        help="First line is a header, don't filter out.")
    parser.add_argument('--infile', type=argparse.FileType("r"), default=sys.stdin,
                        help="The file you'd like to read in. Default is stdin.")
    parser.add_argument('--outfile', type=argparse.FileType("w"), default=sys.stdout,
                        help="The file you'd like to write to. Default is stdout.")
    parser.add_argument('--verbose', action="store_true", default=False,
                        help="Explain why lines are being included")
  
    args = parser.parse_args()
    return args

def main():
    args = get_args()
    feedfilter = FeedFilter(args)
    feedfilter.process_file()

if __name__ == "__main__":
    main()

